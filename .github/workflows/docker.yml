name: Build and Deploy

on:
  push:
    branches:
      - master

env:
  IMAGE_NAME: trackix

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build application
        run: |
          mvn clean install -Dmaven.test.skip=true
        continue-on-error: false

      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: target/

  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN_REGISTRY }}

      - name: Build and push Docker image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker build -t $IMAGE_ID:$VERSION .
          docker push $IMAGE_ID:$VERSION
        env:
          DOCKER_BUILDKIT: 1
        

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY_PROD }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa

      - name: Install SSH Client
        run: |
          sudo apt-get update && sudo apt-get --no-install-recommends install -y openssh-client

      - name: Deploy to VPS
        run: |
          ssh -o "StrictHostKeyChecking=no" debian@${{ secrets.HOST }} "docker-compose -f ~/back/docker-compose.yml down --remove-orphans"
          ssh -o "StrictHostKeyChecking=no" debian@${{ secrets.HOST }} "docker-compose -f ~/back/docker-compose.yml pull"
          ssh -o "StrictHostKeyChecking=no" debian@${{ secrets.HOST }} "docker-compose -f ~/back/docker-compose.yml up -d"
